name: Initial Provision

on:
  workflow_dispatch:
    inputs:
      is_initial_provision:
        description: "Set to true to run the initial provisioning workflow"
        required: false
        default: "true"

jobs:
  initial-provision:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      administration: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine if initial provisioning is needed
        id: check
        run: |
          count=$(git rev-list --count HEAD)
          if [ "$count" -gt 1 ]; then
            echo "is_initial_provision=false" >> $GITHUB_OUTPUT
          else
            echo "is_initial_provision=true" >> $GITHUB_OUTPUT
          fi

      - name: Relax branch protection
        if: steps.check.outputs.is_initial_provision == 'true' && github.event.inputs.is_initial_provision == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const branch = context.payload.repository.default_branch;
            // store existing protection
            const protection = await github.rest.repos.getBranchProtection({ owner, repo, branch });
            core.saveState('protection', JSON.stringify(protection.data));
            await github.rest.repos.deleteBranchProtection({ owner, repo, branch });

      - name: Merge bootstrap pull requests
        if: steps.check.outputs.is_initial_provision == 'true' && github.event.inputs.is_initial_provision == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const prs = await github.paginate(github.rest.pulls.list, { owner, repo, state: 'open' });
            for (const pr of prs) {
              if (pr.draft) {
                await github.rest.pulls.update({
                  owner,
                  repo,
                  pull_number: pr.number,
                  draft: false
                });
              }
              await github.rest.pulls.merge({
                owner,
                repo,
                pull_number: pr.number,
                merge_method: 'squash'
              });
            }

      - name: Reinstate branch protection
        if: steps.check.outputs.is_initial_provision == 'true' && github.event.inputs.is_initial_provision == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const branch = context.payload.repository.default_branch;
            const saved = JSON.parse(process.env['STATE_protection']);
            await github.rest.repos.updateBranchProtection({
              owner,
              repo,
              branch,
              required_status_checks: saved.required_status_checks,
              enforce_admins: saved.enforce_admins.enabled,
              required_pull_request_reviews: saved.required_pull_request_reviews,
              restrictions: saved.restrictions
            });

      - name: Tag bootstrap completion
        if: steps.check.outputs.is_initial_provision == 'true' && github.event.inputs.is_initial_provision == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          if git rev-parse --verify bootstrap-complete >/dev/null 2>&1; then
            echo "bootstrap-complete tag already exists"
          else
            git tag bootstrap-complete
            git push origin bootstrap-complete
          fi
